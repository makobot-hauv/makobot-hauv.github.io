{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home The Makobot Hovering Autonomous Underwater Vehicle (HAUV) is a research platform for autonomous marine robotics research based on the BlueROV2 from Blue Robotics . These instructions provide a set of hardware augmentations which can be made to a BlueROV2 in order to provide more capabilities for autonomous operation. We also provide a software stack based on the widely-used robotics framework Robot Operating System (ROS) which provides a starting point for research and development.","title":"Home"},{"location":"#home","text":"The Makobot Hovering Autonomous Underwater Vehicle (HAUV) is a research platform for autonomous marine robotics research based on the BlueROV2 from Blue Robotics . These instructions provide a set of hardware augmentations which can be made to a BlueROV2 in order to provide more capabilities for autonomous operation. We also provide a software stack based on the widely-used robotics framework Robot Operating System (ROS) which provides a starting point for research and development.","title":"Home"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"quickstart/","text":"Quick Start","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"robot_modifications/","text":"Robot Modifications","title":"Robot Modification Instructions"},{"location":"robot_modifications/#robot-modifications","text":"","title":"Robot Modifications"},{"location":"simulations/","text":"Simulations","title":"Simulations"},{"location":"simulations/#simulations","text":"","title":"Simulations"},{"location":"software/fitlet_installation/","text":"Fitlet2 Software Installation Install ROS Install Dependencies","title":"Fitlet2 Software Installation"},{"location":"software/fitlet_installation/#fitlet2-software-installation","text":"","title":"Fitlet2 Software Installation"},{"location":"software/fitlet_installation/#install-ros","text":"","title":"Install ROS"},{"location":"software/fitlet_installation/#install-dependencies","text":"","title":"Install Dependencies"},{"location":"software/jetson_installation/","text":"NVIDIA Jetson TX2 Software Installation","title":"Jetson TX2 Software Installation"},{"location":"software/jetson_installation/#nvidia-jetson-tx2-software-installation","text":"","title":"NVIDIA Jetson TX2 Software Installation"},{"location":"software/networking/","text":"Networking Set up Networking on Topside Computer These instructions assume the topside computer is running Ubuntu Linux 18.04 and ROS. On the topside computer we'll use NetworkManager for convenience. Create a new connection in NetworkManager and use the \"Manual\" IPv4 configuration. Assign the static IP address 192.168.2.1 and the netmask 255.255.255.0 , and leave the gateway blank. Find the hostname of your topside computer by running hostname at the command prompt. Edit the /etc/hosts file and add the following lines: 192.168.2.1 <your hostname> 192.168.2.2 makobot-pi 192.168.2.13 fitlet2-1 192.168.2.169 jetson-tx2 Configure IP addresses for GigE cameras todo Set up Networking on fitlet2 todo Set up Networking on Raspberry Pi todo Set up Networking on Jetson TX2 todo Set up SSH Keys As per the ROS issue described here , we have to set up SSH keys so that roslaunch can correctly SSH into the different machines. Do this step on the topside computer as that is where we will be launching the ROS processes from. Generate the RSA key pair as usual: ssh-keygen -t rsa Save the file in the default location and don't set a passphrase by hitting enter at the prompts (leave blank for no passphrase). Copy the public key over to the other computer, replacing and with the respective username and host address of your machine: ssh-copy-id -oHostKeyAlgorithms='ssh-rsa' <user>@<host> The key here is to use the -oHostKeyAlgorithms='ssh-rsa' when SSH-ing as described in the ROS answers post above. Now when you use roslaunch to launch nodes on remote machines, roslaunch should be able to SSH into the machine without issues. Repeat step 2 for every computer onboard Makobot, copying the RSA key to the Raspberry Pi, the Fitlet2, and the Jetson TX2.","title":"Networking Configuration"},{"location":"software/networking/#networking","text":"","title":"Networking"},{"location":"software/networking/#set-up-networking-on-topside-computer","text":"These instructions assume the topside computer is running Ubuntu Linux 18.04 and ROS. On the topside computer we'll use NetworkManager for convenience. Create a new connection in NetworkManager and use the \"Manual\" IPv4 configuration. Assign the static IP address 192.168.2.1 and the netmask 255.255.255.0 , and leave the gateway blank. Find the hostname of your topside computer by running hostname at the command prompt. Edit the /etc/hosts file and add the following lines: 192.168.2.1 <your hostname> 192.168.2.2 makobot-pi 192.168.2.13 fitlet2-1 192.168.2.169 jetson-tx2","title":"Set up Networking on Topside Computer"},{"location":"software/networking/#configure-ip-addresses-for-gige-cameras","text":"todo","title":"Configure IP addresses for GigE cameras"},{"location":"software/networking/#set-up-networking-on-fitlet2","text":"todo","title":"Set up Networking on fitlet2"},{"location":"software/networking/#set-up-networking-on-raspberry-pi","text":"todo","title":"Set up Networking on Raspberry Pi"},{"location":"software/networking/#set-up-networking-on-jetson-tx2","text":"todo","title":"Set up Networking on Jetson TX2"},{"location":"software/networking/#set-up-ssh-keys","text":"As per the ROS issue described here , we have to set up SSH keys so that roslaunch can correctly SSH into the different machines. Do this step on the topside computer as that is where we will be launching the ROS processes from. Generate the RSA key pair as usual: ssh-keygen -t rsa Save the file in the default location and don't set a passphrase by hitting enter at the prompts (leave blank for no passphrase). Copy the public key over to the other computer, replacing and with the respective username and host address of your machine: ssh-copy-id -oHostKeyAlgorithms='ssh-rsa' <user>@<host> The key here is to use the -oHostKeyAlgorithms='ssh-rsa' when SSH-ing as described in the ROS answers post above. Now when you use roslaunch to launch nodes on remote machines, roslaunch should be able to SSH into the machine without issues. Repeat step 2 for every computer onboard Makobot, copying the RSA key to the Raspberry Pi, the Fitlet2, and the Jetson TX2.","title":"Set up SSH Keys"},{"location":"software/ros_installation/","text":"ROS Software Installation Follow the installation instructions at the link below for your version of ROS and Ubuntu. The ROS Kinetic on Ubuntu 16.04 ROS Melodic on Ubuntu 18.04 Raspberry Pi The Raspberry Pi Fitlet2 Jetson TX2","title":"ROS Installation"},{"location":"software/ros_installation/#ros-software-installation","text":"Follow the installation instructions at the link below for your version of ROS and Ubuntu. The ROS Kinetic on Ubuntu 16.04 ROS Melodic on Ubuntu 18.04","title":"ROS Software Installation"},{"location":"software/ros_installation/#raspberry-pi","text":"The Raspberry Pi","title":"Raspberry Pi"},{"location":"software/ros_installation/#fitlet2","text":"","title":"Fitlet2"},{"location":"software/ros_installation/#jetson-tx2","text":"","title":"Jetson TX2"},{"location":"software/software/","text":"Software The Makobot HAUV system uses the Robot Operating System (ROS) on Ubuntu Linux. Raspberry Pi The Raspberry Pi comes pre-installed with Fitlet2 Jetson TX2","title":"Software"},{"location":"software/software/#software","text":"The Makobot HAUV system uses the Robot Operating System (ROS) on Ubuntu Linux.","title":"Software"},{"location":"software/software/#raspberry-pi","text":"The Raspberry Pi comes pre-installed with","title":"Raspberry Pi"},{"location":"software/software/#fitlet2","text":"","title":"Fitlet2"},{"location":"software/software/#jetson-tx2","text":"","title":"Jetson TX2"}]}